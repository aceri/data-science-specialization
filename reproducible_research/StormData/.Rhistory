find.package("devtools")
find.package("devtools")
install.packages("devtools")
library("devtools")
library(devtools)
find_rtools()
find_topic("KernSmooth")
library(KernSmooth)
library(jsonlite)
jsonData <- fromJSON("https://www.reddit.com/.json")
names(jsonData)
names(jsonData$kind)
list(jsonData$kind)
jsonData$kind
str(jsonData$kind)
str(jsonData$data)
names(jsonData$data)
cat(jsonData)
names(jsonData)
names(jsonData$kind)
names(jsonData$data)
names(jsonData$data$children)
top20<-fromJSON("www.reddit.com/r/bitcoinit/top/.json?count=20")
top20<-fromJSON("http://www.reddit.com/r/bitcoinit/top/.json?count=20")
top20
top20<-fromJSON("http://www.reddit.com/r/bitcoin/top/.json?count=20")
top20
top20$kind
names(top20$kind)
names(top20$data)
top20$data$modhash
top20$data
top20
top20$data.numcomments
top20$data.num_comments
top20$data(num_comments)
top20$data[num_comments]
summary(top20$data)
summary(top20$data$children)
top20$data$children
top20$data$children$data$url
top20$data$children$data$score
top20$data$children$data$num_comments
top20eth<-fromJSON("http://www.reddit.com/r/btc/top/.json?count=20")
top20btc<-top20eth
top20bitcoin<-top20
top20$data$children$data$banned_by
top20$data$children$data$score
top20btc$data$children$data$score
top20$data$children$data$ups/top20$data$children$data$downs
top20$data$children$data$downs/top20$data$children$data$score
top20$data$children$data$clicked/top20$data$children$data$ups
top20$data$children$data$clicked
top20$data$children$data$num_comments/top20$data$children$data$ups
top20btc$data$children$data$num_comments/top20$data$children$data$ups
top20eth<-fromJSON("http://www.reddit.com/r/ethereum/top/.json?count=20")
top20eth$data$children$data$num_comments/top20$data$children$data$ups
block<-fromJSON("https://blockchain.info/es/rawblock")
block<-fromJSON("https://blockchain.info/es/block-index/$block_index?format=json")
block<-fromJSON("http://blockchain.info/es/block-index/$block_index?format=json")
block<-fromJSON("https://blockchain.info/es/block-index/$block_index?format=json%cors=true")
binfo<-fromJSON("https://api.blockchain.info/charts/transactions-per-second?timespan=5weeks&rollingAverage=8hours&format=json")
names(binfo)
names(binfo$name)
binfo$name
binfo$description
binfo<-fromJSON("https://api.blockchain.info/charts/&format=json")
binfo<-fromJSON("https://api.blockchain.info/charts&format=json")
binfo<-fromJSON("https://api.blockchain.info/charts/pools?timespan=5weeks&rollingAverage=8hours&format=json")
binfo<-fromJSON("https://api.blockchain.info/charts/pools?format=json")
top20$data$children$data$url
top20$data$children$data$gilded
top20bitcoin<-fromJSON("http://www.reddit.com/r/bitcoin/top/.json?count=2000")
top20bitcoin$data$children$data$gilded
swirl()
install.packages("swirl")
packageVersion("swirl")
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv()
path2csv
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,pakage,country)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
select(cran)
cran
select(cran,-time)
select(cran,-(x:size))
select(cran,-(X:size))
select(cran,-X:size)
select(cran,-X:-size)
cran
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
Comparison(cran,r_version=<"3.0.2",country=="IN")
Comparison(cran,r_version<="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="IN" | country=="IN")
filter(cran,country=="US" | country=="IN")
filter(cran,size > 100500, r_os=="linux-gnu")
is(na(c(3,5,NA,10)))
is.na(c(3,5,NA,10)))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(R.version))
filter(cran,!is.na(r_version))
cran2<-select(cran,size)
cran2<-select(cran,size_ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^10)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
group_by("package")
group_by(package)
group_by(cran,package)
?group_by
by_package<-group_by(cran,package)
by_package
summarize(mean(size),group_by(cran,package))
summarize(cran,mean(size),group_by(cran,package))
summarize(group_by(cran,package)
group_by(cran,package)
summarize(by_package)
summarize(by_package,mean(size))
submit()
tbl
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts <-filter(pack_sum,count>=678)
top_counts <-filter(pack_sum,count>678)
top_counts <- filter(pack_sum,count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts,count)
top_counts_sorted <- arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
arrange(top_unique,desc(unique))
top_unique_sorted <- arrange(top_unique,desc(unique))
view(top_unique_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(student2,sex,counts,-grade)
gather(students2,sex,counts,-grade)
res<-gather(students2,sex,counts,-grade)
res<-gather(students2,sex_class,counts,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
submit()
submit()
students2
submit()
students2
students3
?gather
submit()
submit()
submit()
students3
submit()
submit()
submit()
swirl()
2
swirl()
Sys.getlocale("LC_TIME")
library(libridate)
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
month(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
k<-FromCSV("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
k<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",header=TRUE)
quir
exit
quit()
swirl()
k<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",header=TRUE)
names(k)
filter(k,VAL>1000000)
k$VAL
filter(k,VAL))24
filter(k,VAL==24)
count(filter(k,VAL==24))
k$FES
x<-read.table("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",header=TRUE)
x<-read.table("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",)
read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",header=TRUE)
library(xlsx)
package(xlsx)
library(xlxs)
library(xlsx)
install.package(xlsx)
install.packages(xlsx)
install.packages("xlsx")
library("xlsx")
read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
install.packages("rJava")
install.packages("xlsx")
library("xlsx")
setwd("C:/Users/David/datasciencecoursera/StormData")
dir()
ls()
data <- read.csv(unz("repdata%2Fdata%2FStormData.csv.bz2", "StormData"))
data <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
library(R.utils)
install.packages("R.utils")
library(R.utils)
bunzip2("repdata%2Fdata%2FStormData.csv.bz2","StormData",remove=FALSE,skip=TRUE)
dataset<-read.csv("StormData")
bunzip2("repdata%2Fdata%2FStormData.csv.bz2","StormData",remove=FALSE,skip=TRUE)
dataset<-read.csv("StormData")
names(dataset)
dataset$EVTYPE
distinct(dataset$EVTYPE)
dataset$EVTYPE
desc(dataset$EVTYPE)
str(dataset$EVTYPE)
summary(dataset$EVTYPE)
head(summary(dataset$EVTYPE),n=5)
names(dataset)
dataset<-read.csv(bzfile("repdata%2Fdata%2FStormData.csv.bz2"))
names(dataset)
plot(dataset$EVTYPE,dataset$FATALITIES)
plot(dataset$EVTYPE,log(dataset$FATALITIES))
plot(dataset$EVTYPE,head(dataset$FATALITIES,n=10))
head(dataset$FATALITIES,n=10)
dataset$FATALITIES
health_damage <- subset(dataset,FATALITIES>0 | INJURIES >0)
health_damage
plot(health_damage$FATALITIES,health_damage$EVTYPE)
health_damage$FATALITIES
names(data)
inputdata<-read.csv("StormData.bz2")
head(inputdata,n=10)
health_dataset <- subset(inputdata, FATALITIES > 0 | INJURIES > 0 | PROPDMG > 0 | CROPDMG > 0 , select = c(, "STATE__", "BGN_DATE", "END_DATE" ,"EVTYPE", "FATALITIES","INJURIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP") )
health_dataset <- subset(inputdata, FATALITIES > 0 | INJURIES > 0 | PROPDMG > 0 | CROPDMG > 0 , select = c("STATE__", "BGN_DATE", "END_DATE" ,"EVTYPE", "FATALITIES","INJURIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP") )
dataset <- subset(inputdata, FATALITIES > 0 | INJURIES > 0 | PROPDMG > 0 | CROPDMG > 0 , select = c("STATE__", "BGN_DATE", "END_DATE" ,"EVTYPE", "FATALITIES","INJURIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP") )
dataset$HARMPOPULATION <- dataset$FATALITIES + dataset$INJURIES
library(dplyr)
dataset$HARMPOPULATION %>% top(20)
dataset$HARMPOPULATION %>% top_n(20)
dataset$HARMPOPULATION
sort_harmpopulation <- table(dataset$HARMPOPULATION)
sort_harmpopulation <- sort(sort_harmpopulation)
sort_harmpopulation
top20 <- tail(names(sort_harmpopulation),20)
top20
dataset$HARMPOPULATION <- dataset$FATALITIES + dataset$INJURIES
sort_harmpopulation <- sort(table(dataset$HARMPOPULATION))
top20_harmpopulation <- tail(names(sort_harmpopulation),20)
top20_harmpopulation_s <- subset(dataset$HARMPOPULATION %in% top20_harmpopulation)
top20_harmpopulation_s <- subset(dataset,dataset$HARMPOPULATION %in% top20_harmpopulation)
top20_harmpopulation_s
barchart(data=top20_harmpopulation_s,EVTYPE ~ HARMPOPULATION)
library(lattice)
barchart(data=top20_harmpopulation_s,EVTYPE ~ HARMPOPULATION)
