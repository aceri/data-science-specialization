DATA$Sub_metering_1 <- as.numeric(as.character(DATA$Sub_metering_1))
DATA$Sub_metering_2 <- as.numeric(as.character(DATA$Sub_metering_2))
DATA$Sub_metering_3 <- as.numeric(as.character(DATA$Sub_metering_3))
# ----------------------------
# PLOT1
# ----------------------------
# Plot 1 should only have one chart
par(mfrow=c(1,1))
# here we go
hist(DATA$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
# Let's save it now to file
dev.copy(png, file="PLOT1.PNG", width=480, height=480)
dev.off()
# ----------------------------
# PLOT2
# ----------------------------
# Plot 1 should only have one chart
par(mfrow=c(1,1))
# Now seems we need plot
plot(DATA$Datetime,DATA$Global_active_power,type="l",col="black",xlab="",ylab="Global Active Power (kilowatts)")
Sys.setlocale("LC_TIME","English")
plot(DATA$Datetime,DATA$Global_active_power,type="l",col="black",xlab="",ylab="Global Active Power (kilowatts)")
plot(DATA$Datetime,c(DATA$Sub_metering_1,DATA$Sub_metering_2,DATA$Sub_metering_3),type="l",col="black",xlab="",ylab="Global Active Power (kilowatts)")
plot(DATA$Datetime,DATA$Sub_metering_1,type="l",col="black",xlab="",ylab="Global Active Power (kilowatts)")
plot(DATA$Datetime,DATA$Sub_metering_2,type="l",col="red",xlab=""
plot(DATA$Datetime,DATA$Sub_metering_2,type="l",col="red",xlab="")
plot(DATA$Datetime,DATA$Sub_metering_2,type="l",col="red",xlab="")
line(DATA$Sub_metering_2,type="l",col="red")
line(DATA$Sub_metering_2,col="red")
line(DATA$Sub_metering_2)
plot(DATA$Datetime,DATA$Sub_metering_1,type="l",col="black",xlab="",ylab="Global Active Power (kilowatts)")
line(DATA$Sub_metering_2)
line(DATA$Datetime, DATA$Sub_metering_2, col="red")
lines(DATA$Datetime, DATA$Sub_metering_2, col="red")
lines(DATA$Datetime, DATA$Sub_metering_3, col="blue")
legend("topright",c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright",c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=(1,1))
legend("topright",c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
plot(DATA$Datetime,DATA$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub-metering")
lines(DATA$Datetime, DATA$Sub_metering_2, col="red")
lines(DATA$Datetime, DATA$Sub_metering_3, col="blue")
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
dev.copy(png, file="PLOT3.PNG", width=480, height=480)
dev.off()
plot(DATA$Datetime,DATA$Voltage, col="black",type="l",xlab="datetime",ylab="Voltage")
plot(DATA$Datetime,DATA$Global_reactive_power, col="black",type="l",xlab="datetime",ylab="Global_reactive_power")
par(mfrow=c(2,2))
# First the Plot1
hist(DATA$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
# Second one. This is a new one.
# Seems just a plot with Voltage, Datetime, xlab & ylab, col="black" ?, type="l"
plot(DATA$Datetime,DATA$Voltage, col="black",type="l",xlab="datetime",ylab="Voltage")
# Third one. we already have it.
plot(DATA$Datetime,DATA$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(DATA$Datetime, DATA$Sub_metering_2, col="red")
lines(DATA$Datetime, DATA$Sub_metering_3, col="blue")
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
# Fourth one. Another new one
# Seems it is another simple plot with datetime and the inactive power, col="black"
# the two labels, type line again and no title
plot(DATA$Datetime,DATA$Global_reactive_power, col="black",type="l",xlab="datetime",ylab="Global_reactive_power")
# Now 4 graphs
par(mfrow=c(2,2))
# First the Plot2
plot(DATA$Datetime,DATA$Global_active_power,type="l",col="black",xlab="",ylab="Global Active Power (kilowatts)")
# Second one. This is a new one.
# Seems just a plot with Voltage, Datetime, xlab & ylab, col="black" ?, type="l"
plot(DATA$Datetime,DATA$Voltage, col="black",type="l",xlab="datetime",ylab="Voltage")
# Third one. we already have it.
plot(DATA$Datetime,DATA$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(DATA$Datetime, DATA$Sub_metering_2, col="red")
lines(DATA$Datetime, DATA$Sub_metering_3, col="blue")
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
# Fourth one. Another new one
# Seems it is another simple plot with datetime and the inactive power, col="black"
# the two labels, type line again and no title
plot(DATA$Datetime,DATA$Global_reactive_power, col="black",type="l",xlab="datetime",ylab="Global_reactive_power")
par(mfrow=c(2,2))
# First the Plot2. Seems the ylab does not have the (kilowatts)
plot(DATA$Datetime,DATA$Global_active_power,type="l",col="black",xlab="",ylab="Global Active Power")
# Second one. This is a new one.
# Seems just a plot with Voltage, Datetime, xlab & ylab, col="black" ?, type="l"
plot(DATA$Datetime,DATA$Voltage, col="black",type="l",xlab="datetime",ylab="Voltage")
# Third one. we already have it. But seems we don't need the legend box
# to remove the legend box is bty="n"
plot(DATA$Datetime,DATA$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(DATA$Datetime, DATA$Sub_metering_2, col="red")
lines(DATA$Datetime, DATA$Sub_metering_3, col="blue")
legend("topright",bty="n", col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
# Fourth one. Another new one
# Seems it is another simple plot with datetime and the inactive power, col="black"
# the two labels, type line again and no title
plot(DATA$Datetime,DATA$Global_reactive_power, col="black",type="l",xlab="datetime",ylab="Global_reactive_power")
# ----------------------------
# Downloading the file
# ----------------------------
# First let's delete everything to avoid troubles
rm(list=ls())
# Destination file
filename="exdata-data-household_power_consumption.zip"
if(!file.exists(filename)) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",filename)
file <- unzip(filename)
unlink(filename)
}
# ----------------------------
# Loading the csv data & getting only the rows we are going to use for speed
# ----------------------------
imported<-read.table("household_power_consumption.txt",sep=";",header=T)
formatted_date<-as.Date(imported$Date,format="%d/%m/%Y")
imported$Date<-as.Date(imported$Date,format="%d/%m/%Y")
# ----------------------------
# Preformatting the data
# ----------------------------
# In order to work properly we convert to numeric
# i had to be very careful here because my date is normally written different with month instead of day order
# i was getting wrong data
DATA <- imported[(imported$Date=="2007-02-01") | (imported$Date=="2007-02-02"),]
DATA$Global_active_power <- as.numeric(as.character(DATA$Global_active_power))
DATA$Global_reactive_power <- as.numeric(as.character(DATA$Global_reactive_power))
DATA$Voltage <- as.numeric(as.character(DATA$Voltage))
DATA <- transform(DATA, Datetime=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M")
DATA$Sub_metering_1 <- as.numeric(as.character(DATA$Sub_metering_1))
DATA$Sub_metering_2 <- as.numeric(as.character(DATA$Sub_metering_2))
DATA$Sub_metering_3 <- as.numeric(as.character(DATA$Sub_metering_3))
# ----------------------------
# PLOT1
# ----------------------------
# Plot 1 should only have one chart
par(mfrow=c(1,1))
# here we go
hist(DATA$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
# Let's save it now to file
dev.copy(png, file="PLOT1.PNG", width=480, height=480)
dev.off()
# ----------------------------
# Downloading the file
# ----------------------------
# First let's delete everything to avoid troubles
rm(list=ls())
# Destination file
filename="exdata-data-household_power_consumption.zip"
if(!file.exists(filename)) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",filename)
file <- unzip(filename)
unlink(filename)
}
# ----------------------------
# Loading the csv data & getting only the rows we are going to use for speed
# ----------------------------
imported<-read.table("household_power_consumption.txt",sep=";",header=T)
formatted_date<-as.Date(imported$Date,format="%d/%m/%Y")
imported$Date<-as.Date(imported$Date,format="%d/%m/%Y")
# ----------------------------
# Preformatting the data
# ----------------------------
# In order to work properly we convert to numeric
# i had to be very careful here because my date is normally written different with month instead of day order
# i was getting wrong data
DATA <- imported[(imported$Date=="2007-02-01") | (imported$Date=="2007-02-02"),]
DATA$Global_active_power <- as.numeric(as.character(DATA$Global_active_power))
DATA$Global_reactive_power <- as.numeric(as.character(DATA$Global_reactive_power))
DATA$Voltage <- as.numeric(as.character(DATA$Voltage))
DATA <- transform(DATA, Datetime=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M")
DATA$Sub_metering_1 <- as.numeric(as.character(DATA$Sub_metering_1))
DATA$Sub_metering_2 <- as.numeric(as.character(DATA$Sub_metering_2))
DATA$Sub_metering_3 <- as.numeric(as.character(DATA$Sub_metering_3))
# ----------------------------
# PLOT2
# ----------------------------
# Plot 1 should only have one chart
par(mfrow=c(1,1))
# Now i have a little problem, that the default date is not in english for me.
# Not sure if this is acceptable
# YOU MIGHT NOT NEED TO DO THIS. I DO. Notice that it depends on
# what platform you use. "English" for Windows, "en_US" for mac, etc.
# You might want to just remove the line even if you don't have an enlish date in your system
Sys.setlocale("LC_TIME","English")
# Now seems we need plot
plot(DATA$Datetime,DATA$Global_active_power,type="l",col="black",xlab="",ylab="Global Active Power (kilowatts)")
#Seems now it is fine even with the english days.
# Let's save it now to file
dev.copy(png, file="PLOT2.PNG", width=480, height=480)
dev.off()
# ----------------------------
# Downloading the file
# ----------------------------
# First let's delete everything to avoid troubles
rm(list=ls())
# Destination file
filename="exdata-data-household_power_consumption.zip"
if(!file.exists(filename)) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",filename)
file <- unzip(filename)
unlink(filename)
}
# ----------------------------
# Loading the csv data & getting only the rows we are going to use for speed
# ----------------------------
imported<-read.table("household_power_consumption.txt",sep=";",header=T)
formatted_date<-as.Date(imported$Date,format="%d/%m/%Y")
imported$Date<-as.Date(imported$Date,format="%d/%m/%Y")
# ----------------------------
# Preformatting the data
# ----------------------------
# In order to work properly we convert to numeric
# i had to be very careful here because my date is normally written different with month instead of day order
# i was getting wrong data
DATA <- imported[(imported$Date=="2007-02-01") | (imported$Date=="2007-02-02"),]
DATA$Global_active_power <- as.numeric(as.character(DATA$Global_active_power))
DATA$Global_reactive_power <- as.numeric(as.character(DATA$Global_reactive_power))
DATA$Voltage <- as.numeric(as.character(DATA$Voltage))
DATA <- transform(DATA, Datetime=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M")
DATA$Sub_metering_1 <- as.numeric(as.character(DATA$Sub_metering_1))
DATA$Sub_metering_2 <- as.numeric(as.character(DATA$Sub_metering_2))
DATA$Sub_metering_3 <- as.numeric(as.character(DATA$Sub_metering_3))
# ----------------------------
# PLOT3
# ----------------------------
# Plot 1 should only have one chart
par(mfrow=c(1,1))
# Change the locale if needed as explained in Plot2
Sys.setlocale("LC_TIME","English")
# So seems it is another plot but changing colors and a legend at the top right
plot(DATA$Datetime,DATA$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(DATA$Datetime, DATA$Sub_metering_2, col="red")
lines(DATA$Datetime, DATA$Sub_metering_3, col="blue")
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
# Let's save it now to file
dev.copy(png, file="PLOT3.PNG", width=480, height=480)
dev.off()
# ----------------------------
# Downloading the file
# ----------------------------
# First let's delete everything to avoid troubles
rm(list=ls())
# Destination file
filename="exdata-data-household_power_consumption.zip"
if(!file.exists(filename)) {
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",filename)
file <- unzip(filename)
unlink(filename)
}
# ----------------------------
# Loading the csv data & getting only the rows we are going to use for speed
# ----------------------------
imported<-read.table("household_power_consumption.txt",sep=";",header=T)
formatted_date<-as.Date(imported$Date,format="%d/%m/%Y")
imported$Date<-as.Date(imported$Date,format="%d/%m/%Y")
# ----------------------------
# Preformatting the data
# ----------------------------
# In order to work properly we convert to numeric
# i had to be very careful here because my date is normally written different with month instead of day order
# i was getting wrong data
DATA <- imported[(imported$Date=="2007-02-01") | (imported$Date=="2007-02-02"),]
DATA$Global_active_power <- as.numeric(as.character(DATA$Global_active_power))
DATA$Global_reactive_power <- as.numeric(as.character(DATA$Global_reactive_power))
DATA$Voltage <- as.numeric(as.character(DATA$Voltage))
DATA <- transform(DATA, Datetime=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M")
DATA$Sub_metering_1 <- as.numeric(as.character(DATA$Sub_metering_1))
DATA$Sub_metering_2 <- as.numeric(as.character(DATA$Sub_metering_2))
DATA$Sub_metering_3 <- as.numeric(as.character(DATA$Sub_metering_3))
# ----------------------------
# PLOT4
# ----------------------------
# Now 4 graphs
par(mfrow=c(2,2))
# Change the locale if needed as explained in Plot2
Sys.setlocale("LC_TIME","English")
# First the Plot2. Seems the ylab does not have the (kilowatts)
plot(DATA$Datetime,DATA$Global_active_power,type="l",col="black",xlab="",ylab="Global Active Power")
# Second one. This is a new one.
# Seems just a plot with Voltage, Datetime, xlab & ylab, col="black" ?, type="l"
plot(DATA$Datetime,DATA$Voltage, col="black",type="l",xlab="datetime",ylab="Voltage")
# Third one. we already have it. But seems we don't need the legend box
# to remove the legend box is bty="n"
plot(DATA$Datetime,DATA$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(DATA$Datetime, DATA$Sub_metering_2, col="red")
lines(DATA$Datetime, DATA$Sub_metering_3, col="blue")
legend("topright",bty="n", col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
# Fourth one. Another new one
# Seems it is another simple plot with datetime and the inactive power, col="black"
# the two labels, type line again and no title
plot(DATA$Datetime,DATA$Global_reactive_power, col="black",type="l",xlab="datetime",ylab="Global_reactive_power")
# And again let's save under PLOT4.PNG
dev.copy(png, file="PLOT4.PNG", width=480, height=480)
dev.off()
library(plot1)
library("plot1.R")
dir()
library("plot1")
par(mfrow=c(1,1))
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot1.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot2.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot3.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot4.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot1.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot2.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot1.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot2.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot3.R')
source('C:/Users/David/datasciencecoursera/household_power_consumption/ExData_Plotting1/plot4.R')
rm(list=ls())
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["forumula"]]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat| color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat| color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot()
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe()
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=pl(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill="dry")
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~driv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=~.,binwidth=2)
qplot(hwy,data=mpg,facets=~..,binwidth=2)
qplot(hwy,data=mpg,facets=~.,binwidth=2)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(daat-displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(daal-displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(data-displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g<-ggplot(mpg,displ,hwy)
g<-ggplot(mpg,aes(displ,hwy))
g
summary(g)
g+geom_point()
g+geom_point()+geom_smoot()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~))
g+geom_point() + geom_smooth(method="lm",facet_grid(.~))
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv))
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_poin(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv),title="Swirl Rules!",labs=x="Displacement",y="Hwy Mileage")
g+geom_point(size=4,alpha=1/2,aes(color=drv),title="Swirl Rules!",labs(x="Displacement",y="Hwy Mileage"))
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black",labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!"))
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price,diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qpot(price,data=diamonds,binwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,birwidth=18497/30,fill=cut())
qplot(price,data=diamonds,birwidth=18497/30,fill=cut)
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,shape=cut,color=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth="lm")
qplot(carat,price,data=diamonds,color=cut,geom_smooth(method="lm"))
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm"))
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut)+geom_smooth(method="lm")
g<-ggplot(diamonds,aes("depth","price"))
g<-ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),ra.rm=TRUE)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+fact_grid(cut~car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
(g+geom_point(alpha=1/3)+facet_grid(cut~car2))+geom_smooth(method="lm",size=3,color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel
?xyplot
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom_
?geom
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
swirl()
dist(dataFrame)
hclust(distxy)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(1.5,col="blue")
abline(h=1.5,col="blue")
abline(h=.4,col="blue")
abline(h=.4,col="red")
5
5
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(drmt)
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min())
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=colsl,pch=8,cex=2,lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
dist(x,y,newCx,newCy)
distance(x,y,newCx,newCy)
medist(x,y,newCx,newCy)
mdist(x,y,newCx,newCy)
